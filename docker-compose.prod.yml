version: '3.8'

services:
  ai-blocks:
    build: .
    container_name: ai-blocks-prod
    ports:
      - "8000:8000"
    environment:
      - AI_BLOCKS_ENV=production
      - AI_BLOCKS_LOG_LEVEL=INFO
      - AI_BLOCKS_DEBUG=false
      - AI_BLOCKS_OPENAI_API_KEY=${OPENAI_API_KEY}
      - AI_BLOCKS_DATABASE_URL=${DATABASE_URL}
      - AI_BLOCKS_REDIS_URL=redis://redis:6379/0
      - AI_BLOCKS_ENABLE_CACHING=true
      - AI_BLOCKS_CACHE_TTL=3600
      - AI_BLOCKS_MAX_CONCURRENT_REQUESTS=100
      - AI_BLOCKS_ENABLE_METRICS=true
      - AI_BLOCKS_ENABLE_TRACING=true
    volumes:
      - ./data:/app/data
      - ./logs:/var/log/ai-blocks
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai-blocks-network

  redis:
    image: redis:7-alpine
    container_name: ai-blocks-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-blocks-network

  postgres:
    image: postgres:15-alpine
    container_name: ai-blocks-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-aiblocks}
      - POSTGRES_USER=${POSTGRES_USER:-aiblocks}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aiblocks}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ai-blocks-network

  nginx:
    image: nginx:alpine
    container_name: ai-blocks-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - ai-blocks
    restart: unless-stopped
    networks:
      - ai-blocks-network

  prometheus:
    image: prom/prometheus:latest
    container_name: ai-blocks-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - ai-blocks-network

  grafana:
    image: grafana/grafana:latest
    container_name: ai-blocks-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - ai-blocks-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: ai-blocks-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger_data:/tmp
    restart: unless-stopped
    networks:
      - ai-blocks-network

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local

networks:
  ai-blocks-network:
    driver: bridge
